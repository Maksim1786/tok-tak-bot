require("dotenv").config();
const { Bot, GrammyError, HttpError, session } = require("grammy");
const {
  commands,
  keyboard,
  menuButton,
  inlineAdminKeyboard,
  inlineKeyboardsCommands,
} = require("../constants/keyboard");
const { jobApplication } = require("./conversations");
const { hydrateApi, hydrateContext } = require("@grammyjs/hydrate");
const {
  conversations,
  createConversation,
} = require("@grammyjs/conversations");

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) throw new Error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
const bot = new Bot(token);

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ FAQ
// bot.use(faqInlineMenu);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
bot.use(session({ initial: () => ({ phone: "", name: "" }) }));

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã
bot.use(hydrateContext());
bot.use(conversations());

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –ø–ª–∞–≥–∏–Ω –∫ api
bot.api.setMyCommands(commands);
bot.api.config.use(hydrateApi());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.
// –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞.
bot.callbackQuery(
  [inlineKeyboardsCommands.submit.yes, inlineKeyboardsCommands.notFinished.yes],
  async (ctx) => {
    await ctx.conversation.exit("jobApplication");
    await bot.api.sendMessage(
      process.env.NODE_ENV === "development"
        ? process.env.ADMIN_ID
        : process.env.MAX_ID,
      `üìå\n–ü—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞ –∏–∑ –±–æ—Ç–∞ –¢–æ–∫-–¢–∞–∫.—Ä—Ñ\n<b>–ò–º—è:</b> ${ctx.session.name}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${ctx.session.phone}`,
      { parse_mode: "HTML", reply_markup: inlineAdminKeyboard }
    );
    await ctx.answerCallbackQuery();
    await ctx.reply(
      "üåû –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–∫–æ—Ä–æ –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º"
    );
  }
);

bot.callbackQuery(inlineKeyboardsCommands.notFinished.no, async (ctx) => {
  await ctx.conversation.exit("jobApplication");
  await ctx.answerCallbackQuery();
  await ctx.reply("–ó–∞—è–≤–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞");
});

// –î–æ–±–∞–≤–ª—è–º –¥–∏–∞–ª–æ–≥
bot.use(createConversation(jobApplication));

// –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
bot.command(["start", "help"], async (ctx) => {
  await ctx.reply(
    "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–æ–∫-–¢–∞–∫.—Ä—Ñ –±–æ—Ç–∞!</b>\n–í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–∞—à–∏ —É—Å–ª—É–≥–∏",
    { parse_mode: "HTML" }
  );
  await ctx.reply("–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º? üëá", {
    reply_markup: keyboard,
  });
});

/**
 * –ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–∞–Ω–¥
 * –ù—É–∂–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è telegram id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ú–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω—ã
 */
bot.command("id", async (ctx) => {
  await ctx.reply(`–í–∞—à telegram ID: ${ctx.from.id}`);
});

bot.hears([menuButton.zakaz, "/zakaz"], async (ctx) => {
  await ctx.conversation.enter("jobApplication");
});

// –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ FAQ
// bot.hears(menuButton.faq, async (ctx) => {
//   await ctx.reply("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å? üëá", {
//     reply_markup: faqInlineMenu,
//   });
// });

bot.callbackQuery("contacted", async (ctx) => {
  await ctx.answerCallbackQuery();
  ctx.callbackQuery.message.editText(
    ctx.callbackQuery.message.text.replace("üìå", "‚úÖ"),
    { parse_mode: "HTML" }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫. https://grammy.dev/ru/guide/errors
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:", e.description);
  } else if (e instanceof HttpError) {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Telegram:", e);
  } else {
    console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
  }
});

bot.start();
